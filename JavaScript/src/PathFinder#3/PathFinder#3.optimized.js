// https://www.codewars.com/kata/576986639772456f6f00030c/train/javascript

function pathFinder(input) {
	const maze = input.split('\n').map(s => s.split(''));
	const minRounds = input.split('\n').map(s => s.split('').fill(Number.MAX_SAFE_INTEGER));

	logMaze(maze);

	const width = maze[0].length;
	const height = maze.length;
	let count = 0;
	let round = 0;
	let altitude;
	let prevAltitude;
	let prevMinRound;

	findPath({ x: 0, y: 0 });
	// console.log({ count });
	console.log(minRounds);
	
	return minRounds[height - 1][width - 1];


	// function findPath(position, prevAltitude, prevMiniRound) {

	// function findPath(prevPosition, direction) {
	// }

	// function findPath(position, prevAltitude, prevMiniRound) {
	function findPath(position, prevPosition) {
		count++;
		if (position.x < 0 || position.y < 0 || position.x > width - 1 || position.y > height - 1) {
			return;
		}
		if (position.x == 0 && position.y == 0) {
			round = 0;
		}
		else {
			altitude = maze[position.y][position.x];
			prevAltitude = maze[prevPosition.y][prevPosition.x];
			prevMinRound = minRounds[prevPosition.y][prevPosition.x];
			round = Math.abs(altitude - prevAltitude) + prevMinRound;
			// round = Math.abs(getAltitude(position) - getAltitude(prevPosition)) + getMiniround(prevPosition);
		}

		if (round < minRounds[position.y][position.x]) {
			// if (Math.abs(getAltitude(position) - prevAltitude) + prevMiniRound < getMiniround(position)) {
			minRounds[position.y][position.x] = round;
			// miniRounds[position.y][position.x] = Math.abs(getAltitude(position) - prevAltitude) + prevMiniRound;
			if (position.x != width - 1 || position.y != height - 1) {
				// for (const direction of directions) {
				// findPath({ x: position.x + direction[0], y: position.y + direction[1] }, getAltitude(position), getMiniround(position));
				// }
				// findPath({ x: position.x + 1, y: position.y }, getAltitude(position), getMiniround(position));
				// findPath({ x: position.x, y: position.y + 1 }, getAltitude(position), getMiniround(position));
				// findPath({ x: position.x - 1, y: position.y }, getAltitude(position), getMiniround(position));
				// findPath({ x: position.x, y: position.y - 1 }, getAltitude(position), getMiniround(position));
				/*
				let nextPosition = { x: 0, y: 0 };
				nextPosition.x = position.x + 1;
				nextPosition.y = position.y;
				findPath(nextPosition, position);
				nextPosition.x = position.x;
				nextPosition.y = position.y + 1;
				findPath(nextPosition, position);
				nextPosition.x = position.x - 1;
				nextPosition.y = position.y;
				findPath(nextPosition, position);
				nextPosition.x = position.x;
				nextPosition.y = position.y - 1;
				findPath(nextPosition, position);
				/*/
				findPath({ x: position.x + 1, y: position.y }, position);
				findPath({ x: position.x, y: position.y + 1 }, position);
				findPath({ x: position.x - 1, y: position.y }, position);
				findPath({ x: position.x, y: position.y - 1 }, position);
				//*/
				// {
				// 	findPath({ x: position.x + 1, y: position.y }, position);
				// }
				// {
				// 	findPath({ x: position.x, y: position.y + 1 }, position);
				// }
				// {
				// 	findPath({ x: position.x - 1, y: position.y }, position);
				// }
				// {
				// 	findPath({ x: position.x, y: position.y - 1 }, position);
				// }
			}
		}
	}
}

function logMaze(maze) {
	const str = maze.map(a => a.join(' ')).join('\n');
	console.log('maze:');
	console.log(str);
}

function test(maze) {
	console.log(pathFinder(maze));
}

function testMap(size) {
	let hundo = '';
	for (let i = 0; i < size; i++) {
		for (j = 0; j < size; j++) {
			hundo += Math.floor(Math.random() * 10);
		}
		hundo += '\n';
	} console.log('Map of size ' + size + 'x' + size + ' generated. Running pathFinder...');
	console.time('pathFinder');
	var answer = pathFinder(hundo.slice(0, -1));
	console.timeEnd('pathFinder');
	return answer;
}

const input1 =
	`000
000
000`;

const input2 =
	`010
010
010`;

const input3 =
	`010
101
010`;

const input4 =
	`0707
7070
0707
7070`;

const input5 =
	`700000
077770
077770
077770
077770
000007`;

const input6 =
	`777000
007000
007000
007000
007000
007777`;

const input7 =
	`000000
000000
000000
000010
000109
001010`;


const inputBig =
	`6985431294009562328040148462789569517123619536157977556956729932077994847857927618693207043891890289
2784811076732642708028520390087883683755484552711431033608765254325341957798938102078370608341539296
5354692269009494318685902910128460503191260263544001218118978940420219969252087866861444221717072294
4362024684182762541793434884585988960620190126593716904369193436010457159081814599089808623147505505
9633978007444362484573948255273610759552298580507513333528284755372179962350709744653028984573787415
1597379062830237099170383779455360582371167400010488151080126236505892674357278088184934362872544325
2418815277393945736295644393541576354327422567552348739519592120135049598591849927438735810327344535
5883593396675204027726757607684855795787672620541222424906310462846786283221588431499906203131005978
6354620585655474541422623707881701915096186581639892696024786374512733402576783439991373118568563002
3270185400268583430672592679571845356147393636333527779172078406287059182492361086446739673581965840
2564677214347881650705713790854091547939418860481986623219232537250993596204211356006055103267633272
0046061556286512120466922733420604798933412114419580785327247090603993669793772081008896869307241938
7820357827357704407425738955049976490373962572043532974487199963849948053162899642691265248641908967
5206847274413589282161168945943821056651276493298264866132531212077116820489435976497537661425299553
5227750415955918514900845032716415944558289615367716522071176915055226286778342168375160854260859620
6199440532861917470960032872318688905902496326082274874838786607775313391128475647092340200311882121
8456183807109915361642438278865411542122783189469907672001444785970985322569312833678417698982142227
4426420130916170326719791935292975612092101348863311001303135855550768985704473456494060458999457949
8422385768818240159036216465048120534911310539046824143401326520180783235990648114458996261179093998
6205757821109841342330702899133205948592041681153713547429513560444486055388125743995307032269552629
8947614379013897677580641631332635744489022523984960555653401204701658372909394754392909580538593286
8941239423101305640350245355753808646190355808373484357297011464607903409475986263061557194194955397
9223855331761796097986965600437196338678169444487172683605927922455943535615211970589568104913305273
9401981656831122775208278885876878990293056171327169733736960087572168666826080438130818945363020184
5196347877820919572507409196045018239330718993652554630116937667783196349053048509703195574603403577
0345175783897360446590823146163967413782765378522967466211944156820697425986646270859105768400170523
6166182872160516317523908282094379997918951776597183914906883184178763732542673940547374655266276341
7882319718427972219387582269612614281856251948835203845440406876819941304041238010838116526706343947
4834174384100279712537821782516961668252384743820425751100199998454201130275982809456109803961740449
9082945495084844270810631912468091076743985080302232666007367075779424172060191020723221712722218590
1764464396411788631433190843117194815151618056314378139524858279198929651591330941807598705062911160
6453714862749154074307831342263492147063523109699490855470473434388636001357219188143658630787167591
1236215547796477702444877194364377853015489479323140244102841572473943919575827585444591946711368253
9196159052326578724891902692548232113778332537853138775419769216991022874757107984290479260988406216
4178807317277029992328816137208870343533413787026200396591604183847546652947275416560842349619089507
9086603974502629364814776835524096286191326070535184836765207541597610291577813436230825581022059122
8820275330427483720203423349398769808640399229583744706590519091337780880806078271264796650143389304
2761718473250517591489971062400526676357419674091629891164833392521208086603107288203140280848463914
4056895477311214207408468785174045675787393032030832893491957202552166824369417984289094803248996034
6492431354751692415059992462881478702943898028535705799118380421223151284892159844935688290367963038
7526039289773511898981632540886917889445224077388052633879581900739732782120053803016025088621004285
0716915264105006934144551212336546607231962505631512175284931537783318626301373390873843198001632423
9506849573191693988999852488283983973925894856015352041450470282537940050090607484729940062872127096
2835617795407487833768990948776449549700173525385982420497538675241643963679277800528721484611027668
7459521878615559287238500199010165545527692421024979790655824644699307393238808111388443089935320980
9259202156290142826229814155965570288345157103479757068691748031951072367912736060479975271072681679
5420719888960526401792218509586066650376351033967653582379713764692988075999512329160059454366372159
4399666901076679491990094232500432819752756335596716291190941071121433962893804350318169381555054383
4999230528006121748145800170705841656972741303444465958859939654531390971340704099138927147010231785
6835763621465982200536421313667458850681254830776022398294614454670041426290201401420031812709540992
7088279343666033157655540277472446186259511867384171055821195495269610846883685264205829221270262993
1808996795914555959406338282934934790002281507192690060570079034897801111639437957208050736365333568
4900680163074453845858597300114204863226286980203367016649847493352150029969671816067770222324176806
9161208937215193332414256371885136069469099064229424207134866914457697599908046770371526182758787529
7099785463936077482668954488841790524821279869016933678973267090576190312291789923387485232761895525
5143724372775722519555419723583398656143600786256302849334720130919730454391563554602843046958808690
1888095283739961453073388443213116135165470992287886236143985307828141266316573687847139732968325027
3809373079006038640470747019447425563875631169543786382366579817412936756857659252179231538785489781
9662268215329339074454948295759443939120486521613654329203731417497487529016349757706512151630656305
1419755766853087502897889152010421088135145470896734802368246791316354176849780342777631806419016684
0360670975484715593860615340353100763491133747805433448746556880100818725505889468330665221834745979
4279257563711458774237314896923913033549840967651050004784735619044150785210187793284002405577200897
0604015158290397783622417913930597128505273800168096837807893351803494054155604403007466868221436024
1663395136004547004002377009825668957964147972452867103812924750406998951834607913806031020094214107
2270883047707002128320407773967437701788342447039687062360049787185919535947912739116451005403785897
7745560113370447976146462701443751678505921556999286838227329105924920402084959977956541636937379904
1901082294043848322275998814212854296989285459977530013224959028146033817237431882382482586320488710
4804940472187997898324581050988215124609029107930235345597791182373555397201007678073209661948566597
8638870232583251568160736498868728229426839456266276093266413069901348230212582799332555160157959701
9311888038066818212374554971277403324884693813808599695798086016861269694794097352055220111706774674
3999041313549962903549690624706988495796166812186364013206569843875839369740225257104427792355619498
5552146966061068347078674442411868051688140636045173013643355014311127972538233925984725887731642899
7872851905911452967629519206438186065224234041064746253715828295884145613310088897804749573605440215
0083787044326421866707008267304662986520816789520904866883124162347279067991695111590372877087220770
2499006874367843258409557720397010277798499625334879369870040182644332331071185317710919096365806731
8607122445973459251376215509309857073549381697677663809549415052206337305434812945046147763430948912
4526150342939836007527701774030404486422510552750396983883663412893785704963696670853186997074590943
7372988209861424373980998737999062101173355770762226810410267420922021586106611970409210507984067792
2611655683893791260713880493244772571524345131759170361038769493513424131426460159216510116497739035
0882618321251739002088239832782581651088547456350105381514056283080486454966756706063676647111064452
2958744715790639701535158157368035160042975900591442903161889685439282574455662308310348173548833752
2234787306686776559154523266469809299108248860002685981938644056567096016951818584268186855595580617
9914045824674267378982377978206421720988252338403080207688463032960078119418421367658221377883906117
3466350087401112535986401876205475689053500829834899238145584615580478451260668855867625026746198248
9874803592569240375946339074171894919039729703723742485639293454293387780805725979731098129946672716
5724514622232922344565491126722989880701227684707990945998615877444671661371818763291949818463283325
8333202028882692939136808343228072508887542531085202412433515319107976080543228813504128295893574909
6130014403466048149331814288671997900232781781747208294458325774369741049083870908503945081302223263
4480553318460081125876955751185155547770805741435589663924829942178956201525591218200019275471644071
9233390793981474772452177344204917415095661498939446604593801312616405315665517405385523816542094063
6035825261887608687813601444279591913007243449161238446548393059640507914149669655759193044033956057
9472312232014638301491936640058027279609213525789846137541227808160093747034593859907205082817429416
3542113349187756398638988427860732413090895910271109482599365375655928066872943604297173887759031806
6543019000268263666834235194230924791055271202324512816230330662466908093710226365525801523408188995
9511406305372063014417538294834783536255040295454177009178170677626300239896562276245665871075938120
4103514300196472061161725583043880482117485098242079935971425833796007314948317394903025427397316498
4870465990931350106575335639603558381266047345291674707403655280007013409714467259601098725424484216
2929917261691887085472332818799263518648999596155896434076436536387277139939135383126691870346503225
4724447830875559855665489642763610439906266129568600657895232906012871878114145282187224584000459430
9983175099587818871776608531031896362730243550141731583912660418573928359068969466996569875582500680`;

// test(input1);
// test(input2);
test(input3);
// test(input4);
// test(input5);
// test(input6);
// test(input7);
// test(inputBig);
// testMap(50);
// testMap(64);		//OK
// testMap(65); 	//Maximum call stack size exceeded
// testMap(66); 	//Maximum call stack size exceeded
// testMap(67); 	//Maximum call stack size exceeded
// testMap(69); 	//Maximum call stack size exceeded
// testMap(70); 	
// testMap(71); 	//Maximum call stack size exceeded
// testMap(91); 	
// testMap(92); 	//Maximum call stack size exceeded
// testMap(93); 	//Maximum call stack size exceeded
// testMap(95); 	//Maximum call stack size exceeded
// testMap(96); 	//Maximum call stack size exceeded
// testMap(97); 	//Maximum call stack size exceeded

// let count = 20000;
// let count = 20000;
// let count = 11567;	
// let count = 12567;		// no exceeded to testRecurrsive1
// let count = 12568;		//  exceeded to testRecurrsive1		
// let count = 15668;

// let count = 11500;
// function testRecurrsive(n) {
function testRecurrsive2() {
	// if (n == n / 10) return;
	// if (n == 0) return;
	if (count == 0) return;
	count--;
	// const m = n;
	// const m = -n;
	// console.log(n);
	// console.log(m);

	// temp();	// no causing exceeded
	// testRecurrsive(n - 1);
	testRecurrsive2();
}

const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];



function temp() {
	// count++;
	count--;
}

function temp2() {
	return 10;
}

function testRecurrsive() {
	// let count = 13962;	//no
	// let count = 13963;	//yes
	let count = 15707;	//no
	// let count = 15708;	//yes
	recurrsive(count);	//no
	// recurrsive();
	console.log('finish!', count);

	function recurrsive() {
		// function recurrsive(n) {	//yes
		// if (n == 0) return;
		if (count - 1 == -1) return;	//no affect to exceeding
		// if (n - 1 == -1) return;	//no affect to exceeding
		count--;					//no affect to exceeding
		// const m = n;
		// const m = -n;
		// console.log(n);				// a little affect
		// console.log(m);

		// for (const d of directions) {	//big effect

		// }

		// for (let index = 0; index < 4; index++) {	//big effect

		// }
		// directions.forEach(element => {	//big effect

		// });

		temp2();
		// temp();	// no causing exceeded
		// testRecurrsive1(n - 1);	// effect
		recurrsive();
	}
}

// testRecurrsive();